TEXTURE_FORMAT:computationFormat(512, 512, GL_RGBA32F, GL_FLOAT)
CALL:FORMAT_TO_CONSTANT(computationFormat)

CALL:GENERATE_FFT2D_PIPELINE(computationFormat, computationFormat, FFTPipeline, SHIFTED)
{
	PRE
	{
		uniform vec4 selection = vec4(1.0, 0.0, 0.0, 0.0);

		vec4 pre(in vec4 c, in vec2 x)
		{
			c.r = dot(c, selection)/(selection.r + selection.g + selection.b);
			c.gba = vec3(0.0, 0.0, 0.0);
			return c;
		}
	}
}
CALL:GENERATE_FFT2D_PIPELINE(computationFormat, computationFormat, IFFTPipeline, INVERSED, SHIFTED)
{
	POST
	{
		vec4 post(in vec4 c, in vec2 x)
		{
			c.gb = c.rr;
			return c;
		}
	}
}

SOURCE:WindowShader
{
	#version 130
	uniform sampler2D 	fourierDomain;
	out vec4		modulation,
				modulated;
	uniform float 		windowSize = 10.0;
	INSERT(computationFormat)

	void main()
	{
		vec2 pos = gl_FragCoord.xy/vec2(computationFormat);
		vec4 f = texture(fourierDomain, pos);
		modulation = vec4(0.0, 0.0, 0.0, 1.0);

		modulation.r = exp(-2.0*((pos.s-0.5)*(pos.s-0.5) + (pos.t-0.5)*(pos.t-0.5))/(windowSize*windowSize/10000.0));

		modulated = f * modulation.r;
	}
}

FILTER_LAYOUT:WindowFilter(computationFormat, WindowShader)

PIPELINE_MAIN:FFTComputationPipeline
{
	INPUT_PORTS(inputTexture)
	OUTPUT_PORTS(outputTexture, fourierDomain, modulated, modulation)

	PIPELINE_INSTANCE:FFTPipeline(FFTPipeline)
	PIPELINE_INSTANCE:IFFTPipeline(IFFTPipeline)
	FILTER_INSTANCE:WindowFilter

	CONNECTION(THIS, inputTexture, FFTPipeline, inputTexture)
	CONNECTION(FFTPipeline, outputTexture, THIS, fourierDomain)
	CONNECTION(FFTPipeline, outputTexture, WindowFilter, fourierDomain)
	CONNECTION(WindowFilter, modulation, THIS, modulation)
	CONNECTION(WindowFilter, modulated, THIS, modulated)
	CONNECTION(WindowFilter, modulated, IFFTPipeline, inputTexture)
	CONNECTION(IFFTPipeline, outputTexture, THIS, outputTexture)
}
