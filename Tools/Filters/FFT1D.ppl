TEXTURE_FORMAT:fmt(512, 1, GL_RGB, GL_UNSIGNED_BYTE)
TEXTURE_FORMAT:plotFormat(512,512,GL_RGB,GL_UNSIGNED_BYTE)
TEXTURE_FORMAT:computationFormat(512, 1, GL_RGBA32F, GL_FLOAT)

CALL:FORMAT_TO_CONSTANT(fmt, fmt)
CALL:FORMAT_TO_CONSTANT(plotFormat, plotFormat)

CALL:GENERATE_FFT1D_PIPELINE(fmt, FFTPipeline, SHIFTED, NO_INPUT)
{
	PRE
	{
		uniform vec4 parameters = vec4(0.1, 0.5, 0.0, 0.0);

		vec4 pre(in vec4 c, in float x)
		{
			if(x>=parameters.r && x<parameters.g)
				c.r = 1.0;
		
			c.g = 1.0 - c.r;

			return c;
		}
	}
}

CALL:GENERATE_FFT1D_PIPELINE(512, IFFTPipeline, INVERSED, SHIFTED)

SOURCE:WindowShader
{
	#version 130
	uniform sampler2D 	fourierDomain;
	out vec4		modulation,
				modulated;

	uniform int		shifted = 1;
	uniform float 		windowSize = 5.0;

	INSERT(fmt)

	void main()
	{
		float x = gl_FragCoord.x/float(fmt.x);
		vec4 f = texture(fourierDomain, vec2(x,0.0));
		modulation = vec4(0.0, 0.0, 0.0, 1.0);

		if(shifted==0)
			modulation.r = (exp(-2.0*x*x/(windowSize*windowSize/10000.0)) + exp(-2.0*(x-1.0)*(x-1.0)/(windowSize*windowSize/10000.0)))/2.0;
		else
			modulation.r = exp(-2.0*(x-0.5)*(x-0.5)/(windowSize*windowSize/10000.0));

		modulated = f * modulation.r;
	}
}

SOURCE:plotShader
{
	#version 130
	uniform sampler2D 	functionValues;
	out     vec4 		outputTexture;
	uniform float 		minimum = -1.0,
				maximum = 4.0;

	INSERT(plotFormat)

	void main()
	{
		float y = gl_FragCoord.y/float(plotFormat.y)*(maximum-minimum)+minimum;
		vec4  f = texture(functionValues, vec2(gl_FragCoord.x/plotFormat.x,0.0));
		outputTexture = vec4(y<f.r,y<f.g,y<f.b,1.0);
	}
}

FILTER_LAYOUT:WindowFilter(computationFormat, WindowShader)
FILTER_LAYOUT:plotFilter(plotFormat,plotShader)

PIPELINE_MAIN:FFTComputationPipeline
{
	OUTPUT_PORTS(outputTexture, plotFFT, plotIFFT, plotModulation)

	PIPELINE_INSTANCE:FFTPipeline(FFTPipeline)
	PIPELINE_INSTANCE:IFFTPipeline(IFFTPipeline)
	FILTER_INSTANCE:WindowFilter
	FILTER_INSTANCE:plotFFT(plotFilter)
	FILTER_INSTANCE:plotIFFT(plotFilter)
	FILTER_INSTANCE:plotModulation(plotFilter)

	CONNECTION(FFTPipeline, outputTexture, plotFFT, functionValues)
	CONNECTION(FFTPipeline, outputTexture, THIS, outputTexture)
	CONNECTION(plotFFT, outputTexture, THIS, plotFFT)

	CONNECTION(FFTPipeline, outputTexture, WindowFilter, fourierDomain) 
	CONNECTION(WindowFilter, modulated, IFFTPipeline, inputTexture)
	CONNECTION(WindowFilter, modulation, plotModulation, functionValues)
	CONNECTION(plotModulation, outputTexture, THIS, plotModulation)
	CONNECTION(IFFTPipeline, outputTexture, plotIFFT, functionValues)
	CONNECTION(plotIFFT, outputTexture, THIS, plotIFFT)
}