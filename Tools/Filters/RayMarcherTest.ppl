INCLUDE(RayMarcherUtils.ppl)
TEXTURE_FORMAT:outputFormat(1920,1200, GL_RGB, GL_UNSIGNED_BYTE, GL_NEAREST, GL_NEAREST)
CALL:FORMAT_TO_CONSTANT(outputFormat, outputFormatSize)

SHADER_SOURCE:rayMarcherTestShader
{
	#version 330

	#define RM_USE_ABSORPTION
	#define RM_USE_SCATTERING

	INSERT(outputFormatSize)
	INSERT(RayMarcherUtils)

	// Scene settings :
	uniform vec3 	eyePos = vec3(3.7, 2.8, 8.4),
			eyeTarget = vec3(0, 0.6, 5),
			objPos = vec3(0, 1.2, 5.0);
	uniform float 	focalLength = 0.5;
	uniform vec3 	lightPos = vec3(2.8, 2, 4.3),
			lightDir = vec3(-1.8, -0.5, 0.7),
			lightCol = vec3(1, 1, 1.5);
	uniform float 	lightSpan = 0.5, // cosine of the angle
			lightProfile = 1.0,
			lightRadiance = 10.0,
			thetaRing2 = 0.1,
			thetaRing3 = 0.4;
	mat3 rotMat2, rotMat3;

	float test(vec3 p)
	{
		return length(max(abs(p-vec3(0,0,5))-0.5,0.0));
	}

	vec2 sceneMap(in vec3 p)
	{
		return	opUnion( vec2(plane(p), 1), 
			opUnion( vec2(sphere(p-lightPos, 0.005), 1024),
			opUnion( vec2(sphere(p-objPos, 0.5), 2),
			opUnion( vec2(torus82(p-objPos, vec2(1.0, 0.1)), 3),
			opUnion( vec2(torus82(rotMat2*(p-objPos), vec2(1.3, 0.1)), 4),
				 vec2(torus82(rotMat3*(p-objPos), vec2(1.6, 0.1)), 5)
					)))));
	}

	
	float absorption(vec3 p, vec3 dir, float d)
	{
		return d*exp(-p.y*2.0)/2.0;
	}

	float scattering(vec3 p, vec3 dir, float d)
	{
		float dLight = distance(p, lightPos);
		return d*0.2*exp(-p.y*1.0)/(dLight*dLight);
	}

	vec4 renderMaterial(vec3 p, vec3 normal, float material, float dist, float absorption, float scattering)
	{
		vec4 col = vec4(0, 0, 0, 1);
		
		if(material>0) // Valid object intersection
		{
			if(material<=1.0) //floor
				col = mod(floor(5.0*p.z) + floor(5.0*p.x), 2.0)*vec4(0.3,0.3,0.3,0)+vec4(0.3,0.3,0.3,1);
			else // other
				col = vec4(material/5.0,1.0-material/5.0, material*material/25.0, 1.0);

			// Simple shading :
			vec3 u = p - lightPos;
			float l = length(u);
			u = u/l;
			float s = max(dot(-u, normal),0.0) * max(pow((max(dot(u, normalize(lightDir)), lightSpan)-lightSpan)/(1.0-lightSpan), lightProfile), 0.0) / max(l*l, 1.0) * lightRadiance;
			col = col * max(s,0.0001) * vec4(lightCol,1);

			// Light source : 
			col = (material>=1024) ? vec4(1,1,1,1) : col;
		}

		col.rgb = col.rgb * softShadow(p, lightPos, 1.0, 32) * max(1.0 - absorption,0.0) + scattering * lightRadiance * lightCol/max(1.0,dist*dist);

		return col;
	}

	void main()
	{
		// Set up the scene : 
		rotMat2 = mat3( 1, 0, 0,
				0, cos(thetaRing2), sin(thetaRing2),
				0, -sin(thetaRing2), cos(thetaRing2));
	
		rotMat3 = mat3(	cos(thetaRing3), sin(thetaRing3), 0,
				-sin(thetaRing3), cos(thetaRing3), 0,
				0, 0, 1);

		vec4 c = renderScene(outputFormatSize, eyePos, eyeTarget, focalLength, 100, 0.0, 0.001, 100.0);
		gl_FragColor = vec4(pow(c.rgb, vec3(1, 1, 1)/2.2), 1.0);
	}
}

FILTER_LAYOUT:rayMarcherTestFilter(outputFormat, rayMarcherTestShader)

PIPELINE_MAIN:rayMarcherTestPipeline
{
	OUTPUT_PORTS(outputTexture)
	FILTER_INSTANCE:rayMarcherTestFilter
}
