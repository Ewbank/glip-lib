/*
	Transfer the image in HSV to apply some corrections, and transfer back to RGB.
*/

REQUIRED_FORMAT:outputFormat(inputFormat0, *, *, GL_RGB, GL_UNSIGNED_BYTE)
CALL:FORMAT_TO_CONSTANT(outputFormat)

INCLUDE(colors.ppl)

SOURCE:ChangeHSVShader
{
	#version 130

	uniform sampler2D	textureInput;
	out     vec4 		textureChangedHSV;
	
	#pragma INSERT(ColorPrimitives)
	#pragma INSERT(outputFormat)

	uniform float	vScaling = 1.0,	// V scaling
			sScaling = 1.0, 
			hRotate = 0.0;

	void main()
	{
		// Get the input data :
		vec2 pos = gl_FragCoord.xy/vec2(outputFormat);
		vec3 rgb = textureLod(textureInput, pos, 0.0).rgb,
		     hsv;
		
		// To HSV
		RGBToHSV(rgb, hsv);

		// Modifications : 
		hsv.z = hsv.z * vScaling;
		hsv.y = hsv.y * sScaling;
		hsv.x = mod(hsv.x + hRotate * 360.0, 360);

		// Back to RGB
		HSVToRGB(hsv, rgb);

		// Write the output data :
		textureChangedHSV.rgb = rgb;
	}
}

// Declare the filter layout :
FILTER_LAYOUT:ChangeHSVFilter(outputFormat, ChangeHSVShader)

PIPELINE_MAIN:ChangeHSVPipeline
{
	INPUT_PORTS(textureInput)
	OUTPUT_PORTS(textureChangedHSV)
	FILTER_INSTANCE:ChangeHSVFilter
}
