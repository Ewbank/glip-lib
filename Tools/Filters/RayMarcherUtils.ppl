/*
	Ray Marcher Utilities Program.
	
	Some part of this code uses primitives proposed by Inigo Quilez.
	See his articles on http://www.iquilezles.org/ and https://www.shadertoy.com/.
*/

SHARED_CODE:RayMarcherUtils
{
	// vec4 sceneMap(in vec3 p)
	// return vec4(distance of a ray to the scene, material code, absorption, scattering).

	// vec4 renderMaterial(float material, float dist, float absorption, float scattering, in vec3 pos, in vec3 normal)
	// Return the material of a shape.

	mat3 computeCameraMatrix(in vec3 p, in vec3 target, float roll)
	{
		vec3 	vForward = normalize(target-p),
			vUpAlign = vec3(sin(roll), cos(roll), 0.0),
			vLeftReal = normalize(cross(vForward, vUpAlign)),
			vUpReal = normalize(cross(vLeftReal, vForward));
	   	return mat3(vLeftReal, vUpReal, vForward);
	}

	vec4 castRay(in vec3 rayOrigin, in vec3 rayDirection, const int numSteps, const float dMin, const float dNear, const float dMax)
	{
		float d = dMin;
		float m = -1.0;
		float a = 0.0, s = 0.0;
		for(int i=0; i<numSteps; i++)
		{
			vec4 res = sceneMap(rayOrigin+rayDirection*d);
			if(res.x<dNear || d>dMax)
				break;
			d += res.x;
			m = res.y;
			a += res.z*res.x;
			s += res.w*res.x;
		}
		if(d>dMax)
			m = -1.0;
		return vec4(d, m, a, s);
	}

	vec3 calcNormal(in vec3 pos)
	{
		const vec3 eps = vec3( 0.001, 0.0, 0.0 );
		vec3 n = vec3(	sceneMap(pos+eps.xyy).x - sceneMap(pos-eps.xyy).x,
				sceneMap(pos+eps.yxy).x - sceneMap(pos-eps.yxy).x,
				sceneMap(pos+eps.yyx).x - sceneMap(pos-eps.yyx).x );
		return normalize(n);
	}

	vec4 renderScene(const ivec2 formatSize, const vec3 eyePos, const vec3 eyeTarget, const float focalLength, const int numSteps, const float dMin, const float dNear, const float dMax)
	{
		mat3 camera = computeCameraMatrix(eyePos, eyeTarget, 0.0);
		vec2 o = (vec2(gl_FragCoord.xy)/vec2(formatSize) - vec2(0.5, 0.5)) * vec2(1.0, -float(formatSize.y)/float(formatSize.x));
		vec3 rayOrigin = vec3(o, 0.0) + eyePos,
		     rayDirection = normalize(camera*vec3(o.xy, focalLength));
		vec4 res = castRay(rayOrigin, rayDirection, numSteps, dMin, dNear, dMax);
		vec3 p = rayOrigin + rayDirection * res.x;
		vec3 n = calcNormal(p);
		return renderMaterial(res.y, res.x, res.z, res.w, p, n);
	}
}
