/*
	Ray Marcher Utilities Program.
	
	Some part of this code uses primitives and source originally proposed by Inigo Quilez.
	See his articles on http://www.iquilezles.org/ and https://www.shadertoy.com/.
*/

SHARED_CODE:RayMarcherUtils
{
	// Will requires : 
	vec2 sceneMap(vec3 p);
	vec4 renderMaterial(vec3 pos, vec3 normal, float material, float d, float absorption, float scattering);

	// Can require : 
	#ifdef RM_USE_ABSORPTION
		float absorption(vec3 p, vec3 dir, float d);
	#endif
	#ifdef RM_USE_SCATTERING
		float scattering(vec3 p, vec3 dir, float d);
	#endif

	// Primitives :
	float plane(vec3 p)
	{
		return p.y;
	}

	float sphere(vec3 p, float radius)
	{
		return length(p)-radius;
	}

	float torus(vec3 p, vec2 t)
	{
		return length(vec2(length(p.xz)-t.x,p.y))-t.y;
	}

	float length8(vec2 p)
	{
		p = p*p; p = p*p; p = p*p;
		return pow( p.x + p.y, 1.0/8.0 );
	}

	float torus82(vec3 p, vec2 t)
	{
		vec2 q = vec2(length(p.xz)-t.x,p.y);
		return length8(q)-t.y;
	}

	// Operators :
	vec2 opUnion(vec2 d1, vec2 d2)
	{
		return (d1.x<d2.x) ? d1 : d2;
	}

	float opSubstraction(float d1, float d2)
	{
		return max(-d1,d2);
	}

	float opIntersection(float d1, float d2)
	{
		return max(d1,d2);
	}

	// Core functions : 
	float sceneMapSimple(vec3 p)
	{
		vec2 tmp = sceneMap(p);
		return tmp.x;
	}

	mat3 computeCameraMatrix(in vec3 p, in vec3 target, float roll)
	{
		vec3 	vForward = normalize(target-p),
			vUpAlign = vec3(sin(roll), cos(roll), 0.0),
			vLeftReal = normalize(cross(vForward, vUpAlign)),
			vUpReal = normalize(cross(vLeftReal, vForward));
	   	return mat3(vLeftReal, vUpReal, vForward);
	}

	vec4 castRay(in vec3 rayOrigin, in vec3 rayDirection, const int numSteps, const float dMin, const float dNear, const float dMax)
	{
		float d = dMin;
		float m = -1.0;
		float a = 0.0, s = 0.0;
		for(int i=0; i<numSteps; i++)
		{
			vec3 p = rayOrigin+rayDirection*d;
			vec2 res = sceneMap(p);
			if(res.x<dNear || d>dMax)
				break;
			d += res.x;
			m = res.y;
			#ifdef RM_USE_ABSORPTION
				a += absorption(p, rayDirection, res.x);
			#endif
			#ifdef RM_USE_SCATTERING
				s += scattering(p, rayDirection, res.x);
			#endif
		}
		if(d>dMax)
			m = -1.0;
		return vec4(d, m, a, s);
	}

	vec3 calcNormal(in vec3 pos)
	{
		const vec3 eps = vec3( 0.001, 0.0, 0.0 );
		vec3 n = vec3(	sceneMap(pos+eps.xyy).x - sceneMap(pos-eps.xyy).x,
				sceneMap(pos+eps.yxy).x - sceneMap(pos-eps.yxy).x,
				sceneMap(pos+eps.yyx).x - sceneMap(pos-eps.yyx).x );
		return normalize(n);
	}

	vec4 renderScene(const ivec2 formatSize, const vec3 eyePos, const vec3 eyeTarget, const float focalLength, const int numSteps, const float dMin, const float dNear, const float dMax)
	{
		mat3 camera = computeCameraMatrix(eyePos, eyeTarget, 0.0);
		vec2 o = (gl_FragCoord.xy - vec2(formatSize)/2.0)/max(float(formatSize.x),float(formatSize.y));
		vec3 rayOrigin = vec3(o, 0.0) + eyePos,
		     rayDirection = normalize(camera*vec3(o, focalLength));
		vec4 res = castRay(rayOrigin, rayDirection, numSteps, dMin, dNear, dMax);
		vec3 p = rayOrigin + rayDirection * res.x;
		vec3 n = calcNormal(p);
		return renderMaterial(p, n, res.y, res.x, res.z, res.w);
	}

	// Other tools : 
	float softShadow(vec3 rayOrigin, vec3 lightPos, float dNearLight, float kShadowSoftness)
	{
		const int maxStep = 64;
		const float dNearIntersect = 0.000001;
		vec3 rayDirection = lightPos - rayOrigin;
		float dMax = length(rayDirection) - dNearLight;
		rayDirection = normalize(rayDirection);
		float res = 1.0;
		int k = 0;
		for(float d=0.0; d<dMax && k<maxStep; )
		{
			float closest = sceneMapSimple(rayOrigin + rayDirection*d);
			if(closest<dNearIntersect)
				return 0.0;
			res = min(res, kShadowSoftness*closest/d);
			d += closest;
			k++;
		}
		return res;
	}
}
