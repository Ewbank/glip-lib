/*
	Sobel Filter
	See http://en.wikipedia.org/wiki/Sobel_operator
*/

// Include :
INCLUDE_FILE(maths.ppl)

// Format :
REQUIRED_FORMAT:sobelOutputFormat(inputFormat0)

SHARED_CODE:Sobel
{
	const mat3 kernelX = mat3(	-1.0, 0.0, 1.0,
					-2.0, 0.0, 2.0,
					-1.0, 0.0, 1.0);

	const mat3 kernelY = mat3(	-1.0, -2.0, -1.0,
					 0.0,  0.0,  0.0,
					 1.0,  2.0,  1.0);

	void computeSobel(in mat3 localRegion, out vec4 data)
	{
		// sobelImage.x : Gx
		// sobelImage.y : Gy
		// sobelImage.p : Magnitude
		// sobelImage.q : Angle

		applyKernel(localRegion, kernelX, data.x);
		applyKernel(localRegion, kernelY, data.y);

		data.p = abs(data.x) + abs(data.y);
		data.q = atan(data.y/data.x);
	}
}

// The Sobel Shader :
SHADER_SOURCE:sobelShaderVisualization()
{
	#version 130

	uniform sampler2D 	inputTexture;
	out     vec4 		sobelTexture,
				visualization;

	// Use the convolution tool :
	INSERT(convolutionTool)
	INSERT(Sobel)

	void main()
	{
		mat3 localRegion;

		aggregate(inputTexture, gl_TexCoord[0].st, vec4(1.0,1.0,1.0,0.0)/3.0, localRegion);

		computeSobel(localRegion, sobelTexture);

		visualization = vec4(sobelTexture.p, sobelTexture.p, sobelTexture.p, 1.0);
	}
}

// Filter :
FILTER_LAYOUT:sobelFilter(sobelOutputFormat, sobelShaderVisualization)

PIPELINE_MAIN:sobelPipeline
{
	INPUT_PORTS(inputTexture)
	OUTPUT_PORTS(sobelTexture,visualization)

	FILTER_INSTANCE:sobelFilterInstance(sobelFilter)
}
