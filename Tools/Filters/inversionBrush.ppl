REQUIRED_FORMAT:outputFormat(inputFormat0)

INCLUDE_FILE(maths.ppl)

SHADER_SOURCE:inversionBrushShader
{
	#version 130
	
	uniform sampler2D inputTexture, inputMask;
	out vec4 outputTexture, outputMask;
	
	// Directly linked to the mouse left click position. Press and drag to paint.
	uniform ivec2 	VectorLastLeftPositionImage = ivec2(0, 0);	
	uniform float	radius = 0.01;
	
	INCLUDE_SHARED_SOURCE:maths

	void main()
	{
		vec2 	pos 	= gl_TexCoord[0].st;
		vec4 	color 	= textureLod(inputTexture, pos, 0),
			mask	= textureLod(inputMask, pos, 0);
		vec2	mTex	= textureCoordinates(VectorLastLeftPositionImage, inputTexture);

		if(distance(pos, mTex)<=radius)
			mask.r = 1.0;
	
		if(mask.r==1.0)
			color.rgb = vec3(1.0, 1.0, 1.0) - color.rgb;

		outputTexture = color;
		outputMask = mask;
	}
}

FILTER_LAYOUT:inversionBrushFilter(outputFormat, inversionBrushShader)

PIPELINE_MAIN:inversionBrushPipeline
{
	INPUT_PORTS(inputTexture, inputMask)
	OUTPUT_PORTS(outputTexture, outputMask)

	FILTER_INSTANCE:inversionBrushFilter(inversionBrushFilter)
}
