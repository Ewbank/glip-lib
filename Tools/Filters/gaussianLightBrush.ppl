REQUIRED_FORMAT:outputFormat(inputFormat0)

INCLUDE(maths.ppl)

SHADER_SOURCE:gaussianLightBrushShader
{
	#version 130
	
	uniform sampler2D initialMask, inputMask;
	out vec4 outputMask;
	
	// Directly linked to the mouse left click position. Press and drag to paint.
	uniform vec2 	VectorLastLeftPositionImage = vec2(0.0, 0.0); // Can be changed to VectorLastRightPositionImage	
	uniform float	radius = 0.01;
	
	INSERT(maths)

	void main()
	{
		vec2 	pos 	= gl_TexCoord[0].st;
		vec4 	init 	= textureLod(initialMask, pos, 0),
			mask	= textureLod(inputMask, pos, 0) + init/1000.0;
		vec2	mTex	= textureCoordinates(ivec2(VectorLastLeftPositionImage), inputTexture);

		mask.r = min(1.0, mask.r + gaussian(distance(pos, mTex), radius));
		outputMask = mask;
	}
}

FILTER_LAYOUT:gaussianLightBrushFilter(outputFormat, gaussianLightBrushShader)

PIPELINE_MAIN:gaussianLightBrushPipeline
{
	INPUT_PORTS(inputTexture, inputMask)
	OUTPUT_PORTS(outputTexture, outputMask)

	FILTER_INSTANCE:gaussianLightBrushFilter(gaussianLightBrushFilter)
}