/*
	Simple filter for optical distortion correction.
*/

REQUIRED_FORMAT:outputFormat0(inputFormat0)

SHADER_SOURCE:distortionCorrectionShader()
{
	#version 130

	uniform sampler2D	textureInput;
	out     vec4 		textureOutput;

	uniform vec2 		distortionOpticalCenter = vec2(0.5, 0.5);
	uniform float 		distortionCoefficient = 0.0;

	void main()
	{
		// Find the right position to read from :
		vec2 pos = gl_TexCoord[0].st - distortionOpticalCenter;

		pos = pos - distortionCoefficient * pow( length(pos), 3.0f ) * normalize( pos ); 

		pos = pos + distortionOpticalCenter;

		// Get the input data :
		vec4 col  = textureLod(textureInput, pos, 0.0);

		// Write the output data :
		textureOutput = col;
	}
}

// Declare the filter layout :
FILTER_LAYOUT:distortionCorrectionFilter(outputFormat0, distortionCorrectionShader)

PIPELINE_MAIN:pipelineDistortionCorrection
{
	// Declare some input and output ports for this pipeline :
	INPUT_PORTS(textureInput)
	OUTPUT_PORTS(textureOutput)

	FILTER_INSTANCE:distortionCorrectionFilter(distortionCorrectionFilter)
}
