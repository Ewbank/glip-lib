/*
	Standard Maths Functions
*/

UNIQUE(MATHS_FUNCTIONS)

// Maths functions : 
SHARED_SOURCE:maths
{
	float gaussian(float l, float r)
	{
		return exp(-l*l/(2.0f*r*r));
	}
}

// Higher level code : 
SHARED_SOURCE:convolutionTool()
{
	// Read a 3x3 matrix from the sample s, centered at position s :
	void aggregate(in sampler2D s, in vec2 pos, in vec4 selection, out mat3 localRegion)
	{
		localRegion = mat3(	0.0, 0.0, 0.0,
					0.0, 0.0, 0.0,
					0.0, 0.0, 0.0);

		ivec2 sz = textureSize(s, 0);
		float sx = 1.0/(float(sz.s));
		float sy = 1.0/(float(sz.t));

		for(int i=-1; i<2; i++)
		{
			for(int j=-1; j<2; j++)
			{
				vec4 col = textureLod(s, pos + vec2(j*sx, i*sy), 0.0);
				localRegion[i+1][j+1] = dot(col,selection);
			}
		}
	}

	// Apply the convolution between localRegion and kernel
	void applyKernel(in mat3 localRegion, in mat3 kernel, out float value)
	{
		value = 0.0;

		for(int i=0; i<3; i++)
		{
			for(int j=0; j<3; j++)
			{
				value += localRegion[i][j] * kernel[i][j];
			}
		}
	}
}

