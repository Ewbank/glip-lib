REQUIRED_FORMAT:outputFormat(inputFormat0)
CALL:FORMAT_TO_CONSTANT(outputFormat)

INCLUDE(maths.ppl)

SOURCE:inversionBrushShader
{
	#version 130
	
	uniform sampler2D inputTexture, inputMask;
	out vec4 outputTexture, outputMask;
	
	// Directly linked to the mouse left click position. Press and drag to paint.
	uniform vec2 	VectorLastLeftPositionFragment = vec2(0, 0),
			VectorLastLeftShiftFragment = vec2(0, 0);
	uniform float	radius = 0.01;
	uniform int	clear = 0;
	
	INSERT(outputFormat)
	INSERT(maths)

	void main()
	{
		vec2 	pos 	= gl_FragCoord.xy/vec2(outputFormat);
		vec4 	color 	= textureLod(inputTexture, pos, 0),
			mask	= textureLod(inputMask, pos, 0);
		vec2	a	= VectorLastLeftPositionFragment/vec2(outputFormat),
			b	= (VectorLastLeftPositionFragment - VectorLastLeftShiftFragment)/vec2(outputFormat);

		if(clear<1)
		{
			if(distanceToSegment(pos, a, b)<=radius)
				mask.r = 1.0;
	
			if(mask.r==1.0)
				color.rgb = vec3(1.0, 1.0, 1.0) - color.rgb;

			outputTexture = color;
			outputMask = mask;
		}
		else
		{
			outputTexture = color;
			outputMask = vec4(0.0);
		}
	}
}

FILTER_LAYOUT:inversionBrushFilter(outputFormat, inversionBrushShader)

PIPELINE_MAIN:inversionBrushPipeline
{
	INPUT_PORTS(inputTexture, inputMask)
	OUTPUT_PORTS(outputTexture, outputMask)

	FILTER_INSTANCE:inversionBrushFilter(inversionBrushFilter)
}
