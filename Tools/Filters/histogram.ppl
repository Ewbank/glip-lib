/*
	Histogram Computation
*/

REQUIRED_FORMAT:inputFormat(inputFormat0)
TEXTURE_FORMAT:histogramBinsFormat(256,1,GL_RGBA32F,GL_FLOAT, GL_NEAREST, GL_LINEAR)

CALL:FORMAT_SCALE_SIZE(inputFormat, 0.2, 0.2, reducedFormat)
CALL:FORMAT_TO_CONSTANT(reducedFormat, reducedFormat)
CALL:GENERATE_SAME_SIZE_3D_GRID(reducedFormat, grid)

SHADER_SOURCE:HistogramVertexShader
{
	#version 130

	uniform sampler2D inputTexture;

	const vec2 reducedFormat = vec2(INSERT(reducedFormat));

	void main()
	{
		// Vertex texture fetching :
		vec4 col = textureLod(inputTexture, gl_Vertex.xy/reducedFormat, 0.0);
		float sel = 0.0;
		// Compute the "Payload"
		if(gl_Vertex.z==0.0) // Red plane
		{
			gl_FrontColor = vec4(1.0,0.0,0.0,1.0);
			sel = col.r;
		}
		else if(gl_Vertex.z==1.0) // Green plane
		{
			gl_FrontColor = vec4(0.0,1.0,0.0,1.0);
			sel = col.g;
		}
		else // Blue plane
		{
			gl_FrontColor = vec4(0.0,0.0,1.0,1.0);
			sel = col.b;
		}
		// Only on [0.0,1.0] interval :
		sel = clamp(sel, 0.0, 1.0);
		// Done
		gl_Position = vec4((sel-0.5)*2.0, 0.0, 0.0, 1.0); // set new point position to the color intensity in [-1.0,1.0] interval.
	}
}

// The fragment shader :
SHADER_SOURCE:HistogramFragmentShader
{
	#version 130

	out vec4 histogramBins;

	const vec2 reducedFormat = vec2(INSERT(reducedFormat));

	void main()
	{
		// Prepare normalization constant :
		float nrm = 1.0/(reducedFormat.s*reducedFormat.t);
		histogramBins = gl_Color*nrm;
		histogramBins.a = 1.0;
	}
}

FILTER_LAYOUT:HistogramFilter(histogramBinsFormat, HistogramFragmentShader, HistogramVertexShader, grid)
{
	GL_BLEND(GL_ONE, GL_ONE, GL_FUNC_ADD)
}

PIPELINE_MAIN:HistogramPipeline
{
	INPUT_PORTS(inputTexture)
	OUTPUT_PORTS(histogramBins)
	FILTER_INSTANCE:HistogramFilter(HistogramFilter)
}
