/*****************************************************************************************************************/
/**                                                                                                             **/
/**    GLIP-LIB                                                                                                 **/
/**    OpenGL Image Processing LIBrary                                                                          **/
/**                                                                                                             **/
/**    Author        : R. KERVICHE (ronan.kerviche@free.fr)                                                     **/
/**    LICENSE       : GPLv3                                                                                    **/
/**    Website       : http://sourceforge.net/projects/glip-lib/                                                **/
/**                                                                                                             **/
/**    File          : Cameras_Unicap2.cpp                                                                      **/
/**    Original Date : October 17th 2010                                                                        **/
/**                                                                                                             **/
/**    Description   : Unicap Camera handle                                                                     **/
/**                                                                                                             **/
/*****************************************************************************************************************/

#ifndef __CAMERAS_HANDLE_LIB_UNICAP__
#define __CAMERAS_HANDLE_LIB_UNICAP__

// Protection
#if defined(linux) || defined(__linux) || defined(__linux__)

	// Libraries :
		//#include "./../../../../libunicap-0.9.12/include/unicap.h"
        #include <unicap.h>
		#include "../../StreamManager.hpp"
		#include "../../IOModules.hpp"

	// Prototypes
	namespace Glip
	{
        namespace CoreGL
        {
            class HdlFormat;
            class HdlTexture;
            class HdlPBO;
            class ShaderSource;
        }

        namespace CorePipeline
        {
            class HdlFilter;
        }
	}

	// Types
		typedef unsigned int FOURCC;

	// Constants
		#define MAX_UNICAP_DEVICES (64)

    using namespace Glip::CoreGL;
    using namespace Glip::CorePipeline;

// Information Hub :
	class UnicapHub
	{
		private :
			// Data :
				static int               devCount;
				static unicap_device_t** devices;
		public :
			// Functions :
				UnicapHub(void);
				static void DestroyUnicapHub(void);

				// Get Information :
				static int getNumDevices(void);

				// Get device :
				static unicap_device_t* getDevice(int id);
	};

// Camera
	class UnicapCamera : public OutputModule
	{
		private :
			// Data :
				bool running, enabled, newFrame;
				unicap_handle_t handle;
				char* data;
				int   size;

				//GLIP-Lib specifics
				HdlTexture* image;
				SocketID    imgSocket;
				HdlFilter*  filter;

			// Tools
				void clean(void);
				static void newFrameCallback(unicap_event_t event, unicap_handle_t handle, unicap_data_buffer_t* buffer, void *usr_data);

		public :
			// Tools :
				UnicapCamera(int id, FOURCC fmt, int w, int h, int hist=1);
				~UnicapCamera(void);

				bool isEnabled(void);
				bool isRunning(void);
				bool stop(void);
				bool run(void);
				bool isNewFrame(void);
	};

// Tools
	// FOURCC
	#define      GET_FOURCC(a,b,c,d) (((a) << 24) | ((b) << 16) | ((c) << 8) | (d))

	FOURCC       getFOURCC(char* str);
	std::string  getStringFOURCC(FOURCC a);

	// Other tools
	int          getBufferSizeFromFOURCC(FOURCC code, int w, int h);
	char*        createBufferFromFOURCC(FOURCC code, int w, int h);
	HdlTexture*  createTextureFromFOURCC(FOURCC code, int w, int h);
	const char** getCorrespondingFilter(FOURCC code);

#endif

#endif
