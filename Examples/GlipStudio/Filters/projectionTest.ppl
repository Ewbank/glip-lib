//TEXTURE_FORMAT:format(640,480,GL_RGB,GL_UNSIGNED_BYTE)
REQUIRED_FORMAT:tmpFormat(texInput)//, *, *, GL_LUMINANCE32F_ARB, GL_FLOAT)

MODULE_CALL:IF_FORMAT_SETTING_MATCH(tmpFormat, GL_TEXTURE_INTERNAL_FORMAT, GL_LUMINANCE16)
{
	true
	{
		REQUIRED_FORMAT:format(tmpFormat, *, *, GL_LUMINANCE32F_ARB, GL_FLOAT)
	}

	false
	{
		REQUIRED_FORMAT:format(tmpFormat)
	}
}

SHADER_SOURCE:projectionShader()
{
	#version 130

	uniform sampler2D	texInput;
	out     vec4 		texOutput;

	uniform float 	rot 		= 0.0;
	uniform mat2 	trsm 		= mat2(1.0, 0.0, 0.0, 1.0);
	uniform mat3 	projCol 	= mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0);
	uniform vec3 	colorClamp	= vec3(1.0, 1.0, 1.0),
		     	offsetPre	= vec3(0.0, 0.0, 0.0),
			offsetPost	= vec3(0.0, 0.0, 0.0);

	void main()
	{
		float aRot 	= rot * 10.0;

		vec2 tex 	= gl_TexCoord[0].st - vec2(0.5, 0.5);

		tex 		= mat2(cos(aRot), -sin(aRot), sin(aRot), cos(aRot)) * trsm * tex;

		tex 		= tex + vec2(0.5, 0.5);

		// Get the input data :
		vec4 col  	= textureLod(texInput, tex, 0.0);

		// Write the output data :
		col.rgb		= col.rgb - offsetPre;
		texOutput.rgb 	= projCol*col.rgb;
		texOutput.rgb 	= texOutput.rgb - offsetPost;
		texOutput.a 	= col.a;
	
		// Clamp the color (do not write any fragment) :
		if(texOutput.r>colorClamp.r || texOutput.g>colorClamp.g || texOutput.b>colorClamp.b)
			discard; 
	}
}

// Declare the filter layout :
FILTER_LAYOUT:projectionFilter(format, projectionShader)

PIPELINE_MAIN:pipelineProjection
{
	// Declare some input and output ports for this pipeline :
	INPUT_PORTS(texInput)
	OUTPUT_PORTS(texOutput)

	FILTER_INSTANCE:projectionFilter(projectionFilter)
}
