// Histogram pipeline.
REQUIRED_FORMAT:inputFormat(inputFormat0)

//TEXTURE_FORMAT:histogramBinsFormat(255,1,GL_RGB32F,GL_FLOAT,GL_NEAREST,GL_NEAREST)		// Histograms bins, here, you can replace 255 by 4095 or more for deeper images.
MODULE_CALL:IF_FORMAT_SETTING_MATCH(inputFormat, GL_TEXTURE_DEPTH, GL_UNSIGNED_SHORT)
{
	true
	{
		// 8191 is the largest size supported.
		TEXTURE_FORMAT:histogramBinsFormat(8191,1,GL_RGB32F,GL_FLOAT,GL_NEAREST,GL_NEAREST)
	}

	false
	{
		TEXTURE_FORMAT:histogramBinsFormat(255,1,GL_RGB32F,GL_FLOAT,GL_NEAREST,GL_NEAREST)
	}
}


//TEXTURE_FORMAT:showHistogramFormat(1024,1024,GL_RGB,GL_UNSIGNED_BYTE,GL_NEAREST,GL_NEAREST)  	// Final window representation
REQUIRED_FORMAT:showHistogramFormat(inputFormat0, *, *, GL_RGB, GL_UNSIGNED_BYTE)

//GEOMETRY:grid(GRID_3D, 512, 512, 3)
MODULE_CALL:FORMAT_SCALE_SIZE(inputFormat, 0.25, scaledInput)
MODULE_CALL:GENERATE_SAME_SIZE_3D_GRID(scaledInput, grid)

SHADER_SOURCE:histogramVertShader
{
	#version 130

	uniform sampler2D inputTexture;

	void main()
	{
		vec2 s = textureSize(inputTexture, 0);
		vec2 pos = vec2( gl_Vertex.x / s.x, gl_Vertex.y/s.y );

		// Vertex texture fetching :
		vec4 col = texture(inputTexture, pos);
		
		float sel = 0.0;

		// "Payload"
		if(gl_Vertex.z==0.0)				// Red plane
		{
			gl_FrontColor = vec4(1.0,0.0,0.0,1.0);
			sel = col.r;
		}
		else if(gl_Vertex.z==1.0)			// Green plane
		{
			gl_FrontColor = vec4(0.0,1.0,0.0,1.0);
			sel = col.g;
		}
		else						// Blue plane
		{
			gl_FrontColor = vec4(0.0,0.0,1.0,1.0);
			sel = col.b;
		}

		// Only on [0.0,1.0] interval :
		sel = clamp(sel, 0.0, 1.0);

		// Done
		gl_Position.x = (sel-0.5)*2.0; 	// set new point position to the color intensity in [-1.0,1.0] interval
		gl_Position.y = 0.0;
		gl_Position.z = 0.0;
	}
}

SHADER_SOURCE:histogramFragShader
{
	#version 130

	uniform sampler2D inputTexture;
	out vec4 histogramBins;

	void main()
	{
		ivec2 s = textureSize(inputTexture, 0);
		float nrm = 1.0f / float(s.x*s.y);

		histogramBins = gl_Color * nrm;
	}
}

SHADER_SOURCE:showHistogramShader
{
	#version 130
	uniform sampler2D histogramBins, inputTexture;
	out vec4 outputTexture;

	uniform float scale = 1.0f;

	void main()
	{
		vec2 pos 	= gl_TexCoord[0].st;
		vec4 hist	= textureLod(histogramBins, vec2(pos.s, 0.0), 0);
		vec4 col	= textureLod(inputTexture,  pos, 0);

		if(pos.t>(1.0-hist.r*scale) )
			outputTexture.r = 1.0;
		else
			outputTexture.r = col.r;

		if(pos.t>(1.0-hist.g*scale) )
			outputTexture.g = 1.0;
		else
			outputTexture.g = col.g;

		if(pos.t>(1.0-hist.b*scale) )
			outputTexture.b = 1.0;
		else
			outputTexture.b = col.b;
	}
}


FILTER_LAYOUT:histogramFilter(histogramBinsFormat, histogramFragShader, histogramVertShader, CLEARING_ON, BLENDING_ON, grid)  // Clearing and Blending!
FILTER_LAYOUT:histogramShowFilter(showHistogramFormat, showHistogramShader)

PIPELINE_MAIN:pipelineHistogram
{
	INPUT_PORTS(inputTexture)
	OUTPUT_PORTS(outputTexture, histogramBins)

	FILTER_INSTANCE:histogramFilterInstance(histogramFilter)
	FILTER_INSTANCE:histogramShowFilterInstance(histogramShowFilter)
}
