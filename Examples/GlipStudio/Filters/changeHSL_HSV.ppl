// The output format (for the output texture). Note that the filtering parameters are of no use in this pipeline. They will be use in the next processing/display step :
//TEXTURE_FORMAT:format(1920,1200,GL_RGB,GL_UNSIGNED_BYTE,GL_LINEAR,GL_LINEAR)
REQUIRED_FORMAT:format(texInput)

INCLUDE_FILE(colors.ppl)

// The shader source (for more information, check the GLSL language specifications at http://www.opengl.org/documentation/glsl/) :
SHADER_SOURCE:ChangeHSV
{
	#version 130

	uniform sampler2D	texInput;
	out     vec4 		changedHSV;
	
	INCLUDE_SHARED_SOURCE:ColorPrimitives

	uniform float vScal = 1.0, sScal = 1.0, hRot;

	void main()
	{
		// Get the input data :
		vec4 col  = textureLod(texInput, gl_TexCoord[0].st, 0.0);

		vec3 	rgb = col.rgb,
			hsl, hsv;

		//RGBToHSL(rgb, hsl);
		//HSLToRGB(hsl, rgb);

		RGBToHSV(rgb, hsv);

		hsv.z = hsv.z * vScal;
		hsv.y = hsv.y * sScal;
		
		// Test : 
		hsv.x = mod(hsv.x + hRot * 360.0, 360);

		HSVToRGB(hsv, rgb);

		// Write the output data :
		changedHSV.rgb = rgb;
		changedHSV.a = 1.0;
	}
}

SHADER_SOURCE:MeanFilter()
{
	#version 130

	uniform sampler2D	changedHSV;
	out     vec4 		texOutput;

	uniform float scalWindow = 1.0f;

	void main()
	{
		ivec2 sz 	= textureSize(changedHSV, 0);
		float sx 	= 1.0/(float(sz.x));
		float sy 	= 1.0/(float(sz.y));

		vec4 a00	= textureLod(changedHSV, gl_TexCoord[0].st + vec2(-sx,-sy)	, 0);
		vec4 a01	= textureLod(changedHSV, gl_TexCoord[0].st + vec2(-sx,0.0)	, 0);
		vec4 a02	= textureLod(changedHSV, gl_TexCoord[0].st + vec2(-sx,+sy)	, 0);
		vec4 a10	= textureLod(changedHSV, gl_TexCoord[0].st + vec2(0.0,-sy)	, 0);
		vec4 a11	= textureLod(changedHSV, gl_TexCoord[0].st			, 0);
		vec4 a12	= textureLod(changedHSV, gl_TexCoord[0].st + vec2(0.0,+sy)	, 0);
		vec4 a20	= textureLod(changedHSV, gl_TexCoord[0].st + vec2(+sx,-sy)	, 0);
		vec4 a21	= textureLod(changedHSV, gl_TexCoord[0].st + vec2(+sx,0.0)	, 0);
		vec4 a22	= textureLod(changedHSV, gl_TexCoord[0].st + vec2(+sx,+sy)	, 0);
		
		texOutput	= ((a00 + a01 + a02 + a10 + a12 + a20 + a21 + a22)*scalWindow + a11) / (1.0 + 8.0*scalWindow);
	}
}

// Declare the filter layout :
FILTER_LAYOUT:fchangeHSV(format,ChangeHSV)
FILTER_LAYOUT:fmean(format,MeanFilter)

PIPELINE_MAIN:modifyHSL
{
	// Declare some input and output ports for this pipeline ::
	INPUT_PORTS(texInput)
	OUTPUT_PORTS(changedHSV,texOutput)

	FILTER_INSTANCE:instChangeHSV(fchangeHSV)
	FILTER_INSTANCE:instMean(fmean)

	// autoconnect
}
