REQUIRED_FORMAT:outputFormat(inputTexture)

GEOMETRY:pentagon(CUSTOM_MODEL, GL_TRIANGLES, true)
{
	VERTEX(0.500,	0.500,	0.500,	0.500)
	VERTEX(0.500, 	0.000,	0.500, 	0.000)
	VERTEX(0.024,	0.345,	0.024,	0.345)
	VERTEX(0.206,	0.905,	0.206,	0.905)
	VERTEX(0.794,	0.905,	0.794,	0.905)
	VERTEX(0.976,	0.345,	0.976,	0.345)
	
	ELEMENT(0, 1, 2)
	ELEMENT(0, 2, 3)
	ELEMENT(0, 3, 4)
	ELEMENT(0, 4, 5)
	ELEMENT(0, 5, 1)
}

SHADER_SOURCE:vertexShaderDisplacement
{
	#version 130

	uniform vec2 pos = vec2(0.0, 0.0);
	
	void main()
	{
		gl_FrontColor = gl_Color;

		vec2 p = (gl_Vertex.xy - vec2(0.5, 0.5)) * 2.0;

		if(length(p)<0.001)
			p = vec2(pos.x, -pos.y);

		gl_Position.xy = p;

		gl_TexCoord[0] = gl_TextureMatrix[0] * gl_MultiTexCoord0;
	}
}

SHADER_SOURCE:fragmentShaderNormal
{
	#version 130
	
	uniform sampler2D inputTexture;
	out vec4 outputTexture;
	
	void main()
	{
		// The current fragment position : 
		vec2 pos = gl_TexCoord[0].st;

		// Read the base level of the texture at the current position : 
		vec4 col = textureLod(inputTexture, pos, 0);
	
		outputTexture = col;
	}
}

FILTER_LAYOUT:displacementFilter(outputFormat, fragmentShaderNormal, vertexShaderDisplacement, CLEARING_ON, BLENDING_ON, pentagon)

PIPELINE_MAIN:displacementPipeline
{
	INPUT_PORTS(inputTexture)
	OUTPUT_PORTS(outputTexture)

	FILTER_INSTANCE:displacementInstance(displacementFilter)
}
